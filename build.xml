<?xml version="1.0" encoding="UTF-8"?>
<project name="sLibrary" default="help">

	<includepath classpath="." />
	
	
	<taskdef classname="System.Phing.Task.ConfigAdapterTask" name="system-config-adapter" />
	<taskdef classname="System.Phing.Task.SchemaFormater" name="system-scheme-formater" />
	<taskdef classname="System.Phing.Task.DependenciesTask" name="dependencies" />
	<taskdef classname="System.Phing.Task.PhpUnit3Task" name="phpunit34" />
	<taskdef classname="System.Phing.Task.BootstrapResourceTask" name="bootstrap-resource" />
	

	<target name="_init" description="Phing constructor">
		<property name="environment" value="main" override="false"/>
		<system-config-adapter environment="${environment}" config="tests/application/configs/application.common.ini" />
	</target>

	<target name="help" description="Usage help">
		<echo>Don't worry ${env.USER}, help is coming! </echo>
		<echo>Try phing -l</echo>
	</target>

	<target name="createdb" depends="_init" description="Create database">
		<pdo url="mysql:host=${resources.db.params.host}"
			userid="${resources.db.params.username}"
			password="${resources.db.params.password}"
			onerror="abort">
			create database if not exists `${resources.db.params.dbname}` charset utf8;
		</pdo>
	</target>

	<target name="freshdb" depends="_init, _drop-db-tables, _create-db-tables" description="Resets the database">
		<echo>Db ${resources.db.params.dbname} is fresh</echo>
	</target>

	<target name="_create-db-tables" description="Create db tables">
		<echo>Creating fresh tables...</echo>
		<pdo url="mysql:host=${resources.db.params.host};dbname=${resources.db.params.dbname}"
			userid="${resources.db.params.username}"
			password="${resources.db.params.password}">
			<fileset dir="${path.sql}">
				<include name="User.sql"/>
				<include name="Tree.sql"/>
				<include name="Acl.sql"/>
			</fileset>
		</pdo>

	</target>

	<target name="_drop-db-tables" description="Drop db tables">
		<echo>Dropping old tables...</echo>
		<pdo url="mysql:host=${resources.db.params.host};dbname=${resources.db.params.dbname}"
			userid="${resources.db.params.username}"
			password="${resources.db.params.password}"
			onerror="continue">
			<fileset dir="${path.sql}">
				<include name="Drop.sql"/>
			</fileset>
		</pdo>
	</target>

	<target name="_create-and-fresh-db-test" depends="_init-test, createdb, freshdb" description="Create new db if it does not exist and fresh it">
	</target>

	<target name="_init-test" description="Phing constructor for testing">
		<property name="environment" value="testing"/>
		<echo>Testing environment is turned on</echo>
	</target>

	<target name="_init-dirs" depends="_init" description="Create report dirs">
		<delete dir="${path.build}" includeemptydirs="true" verbose="false" failonerror="false" />
		<mkdir dir="${path.build}" />
		<mkdir dir="${path.build}/reports" />
		<mkdir dir="${path.build}/reports/tests" />
		<mkdir dir="${path.build}/reports/coverage" />
		<mkdir dir="${path.build}/reports/tests-cli" />
		<mkdir dir="${path.build}/reports/coverage-cli" />
		<mkdir dir="${path.build}/reports/groups" />
	</target>

	<target name="coverage1" depends="_init-test, _init" description="Run 1 test setted in property test.single (-D parameter) with coverage">
		<if>
			<isset property="test.single" />
			<then>
				<echo>Running ${test.single}...</echo>
				<bootstrap-resource/>
				<coverage-setup database="${path.build}/reports/coverage/coverage.db">
					<fileset dir="${path.application}">
						<include name="**/*.php"/>
					</fileset>
					<fileset dir="${path.root}/library/System">
						<include name="**/*.php"/>
						<exclude name="**/Phing/Task/**/*.php"/>
					</fileset>
				</coverage-setup>

				<phpunit34
					codecoverage="true"
					failureproperty="phing.phpunit.failure"
					errorproperty="phing.phpunit.error"
					incompleteproperty="phing.phpunit.incomplete"
					skippedproperty="phing.phpunit.skipped"
					bootstrapfile="${path.tests}/bootstrap.php">
					<formatter todir="${path.build}/reports/tests" classname="System.Phing.Task.PhpUnit3.JUnitResultFormatter"/>
					<formatter type="plain" usefile="false" />
					<batchtest>
						<fileset dir="${path.root}/tests">
							<include name="**/${test.single}.php"/>
						</fileset>
					</batchtest>
				</phpunit34>

				<phpunitreport infile="${path.build}/reports/tests/testsuites.xml"
					format="frames"
					todir="${path.build}/reports/tests"
					styledir="${path.pear}/data/phing/etc"/>
			
				<coverage-report outfile="${path.build}/reports/coverage/coverage.xml">
					<report todir="${path.build}/reports/coverage" styledir="${path.pear}/data/phing/etc"/>
				</coverage-report>

				<fail if="phing.phpunit.error" message="${test.single} had errors" />
				<fail if="phing.phpunit.failure" message="${test.single} had failed" /> 

			</then>
			<else>
				<fail message="Run $phing test1 -Dtest.single=$ClassFileName" />
			</else>
		</if>

	</target>

	<target name="_init-group-dirs" depends="_init" description="Create group report dirs">
		<delete dir="${path.build}/reports/groups/${group}" includeemptydirs="true" verbose="false" failonerror="false" />
		<mkdir dir="${path.build}/reports/groups/${group}" />
		<mkdir dir="${path.build}/reports/groups/${group}/tests" />
		<mkdir dir="${path.build}/reports/groups/${group}/coverage" />
	</target>

	<target name="_coverage-group" depends="_create-and-fresh-db-test" description="Run PHPUnit tests with coverage">
		
		<phingcall target="_init-group-dirs">
			<property name="group" value="${group}" />
		</phingcall>

		<bootstrap-resource />

		<coverage-setup database="${path.build}/reports/groups/${group}/coverage/coverage.db">
			<fileset dir="${path.root}/${group}">
				<include name="**/*.php"/>
				<exclude name="**/Phing/Task/**/*.php"/>
			</fileset>
		</coverage-setup>

		<phpunit34
			codecoverage="true"
			haltonfailure="false"
			haltonerror="false"
			failureproperty="phing.phpunit.failure"
			errorproperty="phing.phpunit.error"
			incompleteproperty="phing.phpunit.incomplete"
			skippedproperty="phing.phpunit.skipped"
			bootstrapfile="${path.tests}/bootstrap.php">
			<formatter todir="${path.build}/reports/groups/${group}/tests" classname="System.Phing.Task.PhpUnit3.JUnitResultFormatter"/>
			<formatter type="plain" usefile="false" />
			<batchtest>
				<fileset dir="${path.tests}">
					<include name="${group}/**/*Test*.php"/>
				</fileset>
			</batchtest>
		</phpunit34>

		<phpunitreport infile="${path.build}/reports/groups/${group}/tests/testsuites.xml"
			format="frames"
			todir="${path.build}/reports/groups/${group}/tests"
			styledir="${path.pear}/data/phing/etc"/>

		<coverage-report outfile="${path.build}/reports/groups/${group}/coverage/coverage.xml">
			<report todir="${path.build}/reports/groups/${group}/coverage" styledir="${path.pear}/data/phing/etc"/>
		</coverage-report>

	</target>

	<target name="coverage" depends="_init-test, _init-dirs" description="Run PHPUnit tests with coverage">
		<bootstrap-resource />

		<coverage-setup database="${path.build}/reports/coverage/coverage.db" />		

		<phingcall target="coverage-lib" />
		<phingcall target="coverage-app" />

		<append destFile="${path.build}/reports/coverage/coverage.db" file="${path.build}/reports/groups/library/System/coverage/coverage.db" />
		<append destFile="${path.build}/reports/coverage/coverage.db" file="${path.build}/reports/groups/application/coverage/coverage.db" />

		<coverage-report outfile="${path.build}/reports/coverage/coverage.xml">
			<report todir="${path.build}/reports/coverage" styledir="${path.pear}/data/phing/etc"/>
		</coverage-report>

	</target>	

	<target name="coverage-lib" depends="_init-test, _init-dirs" description="Run PHPUnit tests on library classes with coverage">
		<phingcall target="_coverage-group">
			<property name="group" value="library/System" />
		</phingcall>
	</target>

	<target name="coverage-app" description="Run PHPUnit tests on application classes with coverage">
		<phingcall target="_coverage-group">
			<property name="group" value="application" />
		</phingcall>
	</target>

	<target name="test1" depends="_init-test, _init" description="Run 1 test setted in property -D test.single">
		<if>
			<isset property="test.single" />
			<then>
				<echo>Running ${test.single}...</echo>
		
				<phpunit34
					failureproperty="phing.phpunit.failure"
					errorproperty="phing.phpunit.error"
					incompleteproperty="phing.phpunit.incomplete"
					skippedproperty="phing.phpunit.skipped"
					bootstrapfile="${path.tests}/bootstrap.php">
					<formatter type="plain" usefile="false" />
					<batchtest>
						<fileset dir="${path.root}/tests">
							<include name="**/${test.single}.php"/>
						</fileset>
					</batchtest>
				</phpunit34>
		
				<fail if="phing.phpunit.error" message="${test.single} had errors" />
				<fail if="phing.phpunit.failure" message="${test.single} had failed" /> 

			</then>
			<else>
				<fail message="Run $phing test1 -Dtest.single=$ClassFileName" />
			</else>
		</if>

	</target>

	<target name="test" depends="_init-test, _init-dirs, _create-and-fresh-db-test" description="Run PHPUnit tests">
		<phpunit34
			haltonfailure="false"
			haltonerror="false"
			failureproperty="phing.phpunit.failure"
			errorproperty="phing.phpunit.error"
			incompleteproperty="phing.phpunit.incomplete"
			skippedproperty="phing.phpunit.skipped"
			bootstrapfile="${path.tests}/bootstrap.php" >
			<formatter todir="${path.build}/reports/tests" classname="System.Phing.Task.PhpUnit3.JUnitResultFormatter"/>
			<formatter type="plain" usefile="false" />
			<batchtest>
				<fileset dir="${path.tests}">
					<include name="**/*Test*.php"/>
				</fileset>
			</batchtest>
		</phpunit34>
		
		<phpunitreport infile="${path.build}/reports/tests/testsuites.xml"
			format="frames"
			todir="${path.build}/reports/tests"
			styledir="${path.pear}/data/phing/etc"/>
	</target>
	
	<target name="dep" description="Check project dependencies for production/runtime">
		<phing phingfile="scripts/dep.xml" target="dep" />
	</target>
	
	<target name="devdep" description="Check project dependencies for development">
		<phing phingfile="scripts/dep.xml" target="devdep" />
	</target>
</project>
